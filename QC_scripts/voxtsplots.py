### Usage: python3 voxtsplots.py
### This script generates voxelwise carpet plots in accordance with Power 2017 "A simple but useful way to assess fMRI scan qualities." It calls on scripts made by R. Ciric/the Satterwaithe group in their xcpEngine pipeline (namely the layerLabels function and an edited version of voxts.R). The present script generates plots for ALL processing versions of functional runs, but could be modified to include only particular runs (based on file naming). The present script plots FD and standardized DVARS along with the grayplots, but any 1D timeseries could be plotted by modifying the --ts flag at the call for voxts_edits.R. Additional timeseries can be plotted by adding them with a comma separation and the format [ts_name:ts_path:threshold(opt),ts_name:ts_path:threshold(opt)]. 
### Dependencies:
#AFNI, FSL, ANTS
#To install on Longleaf (UNC), type 'module add ____' from terminal, followed by 'module save'
#On other systems, add to path
#The following R packages also need to be installed: 
#    signal, filter, pracma, optparse, RNifti, reshape2, ggplot2, svglite, lme4
#To install R packages on Longleaf, enter R (type ‘R’ from your terminal), and call:
#    install.packages(“signal”,”filter”,”pracma”,”optparse”) 
#etc. You can list as many as you’d like. It will ask you to select a CRAN mirror from a pop-up window. Select any location from the US, and it will run accordingly. Check to make sure there are no errors. 


import os,string
import sys
import pandas as pd
import numpy as np

### FUNCTIONS ###

def get_sublist(subdir):
    """ Lists all directories in a main directories of all subjects to create a subject list. Note that this is BIDS format specific (assumes all subject directories begin "sub-xxx". Could be modified.
 Return: subject list """
    sublist = []
    for subnum in np.sort(os.listdir(subdir)):
        if subnum[0:3]=='sub': ###Make sure it's a subject number, this is what's BIDS format specific
            BOLD_directory = os.path.join(subdir,subnum,'ses-1','func')
            if os.path.isdir(BOLD_directory): ###Pass only subject DIRECTORIES, not html summaries which also appear in directory
                os.chdir(BOLD_directory)
                for file in os.listdir(BOLD_directory):
                    if 'confounds' in file: ###Had to add this in since the script was failing because sub list included some who failed fmriprep
                        subparts=subnum.split('-')
                        sublist.append(subparts[1])
                    else:
                        pass
        os.chdir(subdir)

    return sublist

def get_BOLDfiles(indiv_dir):
    """Lists all files for a subject and returns a list of all BOLD timeseries, as a plot will be generated for each one. Note that this is fairly BIDS format specific, but will work fine if there are not extraneous nifti files in each subject's directory. 
 Return: list of subject's BOLD files """
    BOLD_list = []
    for file in os.listdir(indiv_dir):
        if file.endswith(".nii.gz"):
            BOLD_list.append(file)
        else:
            pass

    return BOLD_list

def get_confounds_file(indiv_dir):
    """Finds the confounds file generated by fmriprep, which will be used next"""
    print(indiv_dir)
    for file in os.listdir(indiv_dir):
        if 'confounds' in file:
            #confounds_file = pd.read_csv(file,sep='/t')
            confoundstsv = file 
            print(confoundstsv)
        else:
            pass
    
    confounds_file = pd.read_csv(confoundstsv,sep='\t')
    
    return confounds_file 

def get_confounds_ts(confounds_file):
    """Uses the confounds file generated by fmriprep and extracts a timeseries for (std) DVARS and FD to be used in the plot.
 Return: dvars_ts, fd_ts """

    dvars = confounds_file['stdDVARS']
    DVARS_ts = dvars.to_csv('DVARS_ts.tsv',sep='\t',na_rep='NA')
    DVARS_ts_file = 'DVARS_ts.tsv'

    FD = confounds_file['FramewiseDisplacement']
    FD_ts = FD.to_csv('FD_ts.tsv',sep='\t',na_rep='NA')
    FD_ts_file = 'FD_ts.tsv'

    return DVARS_ts_file, FD_ts_file

def make_plots(xcp_path,indiv_dir,BOLD_file,ROI_map,DVARS_ts_file,FD_ts_file,ROI_names,indiv_output_dir,subnum):
    """Runs the actual command to make the plots, using voxts_edits. Also creates suffixes to name the appropriately name the output figure and store in the correct subject directory."""

    suff_name = BOLD_file.split('bold')
    suff = suff_name[1]
    suff_ext = suff.split('.nii.gz')
    suffix = suff_ext[0]

    plotname = 'sub-%s%s.png' %(subnum,suffix)
    plotdir = os.path.join(indiv_output_dir,plotname)

    if not os.path.exists(plotdir):
        command = 'Rscript %s/voxts_edits.R --img %s/%s --roi %s --ts FD:%s/%s,DVARS:%s/%s --names %s --outfig %s/sub-%s%s.png' %(xcp_path,indiv_dir,BOLD_file,ROI_map,indiv_dir,FD_ts_file,indiv_dir,DVARS_ts_file,ROI_names,indiv_output_dir,subnum,suffix)

        print(command)
        os.system(command)
    else:
        print('PLOT ALREADY MADE FOR %s' %(plotname))
#Had to make the above loop/modification because some files were made before the script failed due to some subjects not having successfully passed through fmriprep, and didn't want to repeat files



def make_output_folders(sub,output_dir):
    """Make output folders for each subject's plots, in a loop to be done for each sub in sublist in main script"""
    
    indiv_output_dir = os.path.join(output_dir,'sub-%s' %(sub),'')
    if not os.path.exists(indiv_output_dir):
        os.makedirs(indiv_output_dir)
    else:
        pass

    return indiv_output_dir




### INPUTS ###

def main(argv = sys.argv):

    print('running')
    #WILL CHANGE BASED ON STUDY; will come up with a more universal script later
    
    subdir = '/proj/hng/cohenlab/projects/kki_adhd/data_BIDS/derivatives/fmriprep/'
    xcp_path = '/proj/hng/cohenlab/projects/xcpEngine/utils/'
    output_dir = '/proj/hng/cohenlab/projects/kki_adhd/data_BIDS/derivatives/ciricQCplots/'
    
    ###Below is the ROI map created from the layerLabels function, as well as the names for each region. Since we're only doing the Power atlas, the map is the same for everyone, as are the names (which are pretty illegible anyways). I will later add in a function to create the depth maps- if you need to do this before I add it in, let me (Kelly) know and I will give you code! ###

    ROI_map = '/proj/hng/cohenlab/projects/kki_adhd/data_BIDS/derivatives/mask_files/ciricQC/layerLabels_Power_rois.nii.gz'
    ROI_names = '/proj/hng/cohenlab/projects/kki_adhd/data_BIDS/derivatives/mask_files/ciricQC/Power_layerLabel_names.tsv'

    ### Get sublist ###
    sublist = get_sublist(subdir)
    print(sublist)

    ### Make output directories, define and move into individual directories, find and use confounds files to extract DVARS and FD timeseries, get list of files to be plotted, make plots ###

    for subnum in sublist:
        print(subnum)
        indiv_output_dir = make_output_folders(subnum,output_dir)

        indiv_dir = os.path.join(subdir,'sub-%s' %(subnum), 'ses-1','func') #Note that this assumes one session, but I will add in a function to get the session number 
        os.chdir(indiv_dir)

        confounds_file = get_confounds_file(indiv_dir)
        DVARS_ts_file, FD_ts_file = get_confounds_ts(confounds_file)
        print(DVARS_ts_file)

        BOLD_list = get_BOLDfiles(indiv_dir)

        for file in BOLD_list:
            BOLD_file = file 
            print('making plot for %s' %(BOLD_file))
            make_plots(xcp_path,indiv_dir,BOLD_file,ROI_map,DVARS_ts_file,FD_ts_file,ROI_names,indiv_output_dir,subnum)

        os.chdir(subdir)

### MAIN SCRIPT ###

if __name__ == '__main__':
    main()

        

        
    



